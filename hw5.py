import pathlib
import pandas as pd
from typing import Union, Tuple
import numpy as np
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):

        if type(data_fname) != str and data_fname.__module__ != 'pathlib':
            raise TypeError

        if type(data_fname) == str:
            data_fname = pathlib.Path(data_fname)

        if not pathlib.Path.exists(data_fname):
            raise ValueError

        self.data_fname = data_fname



    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data=  pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """

        hist, bins = np.histogram(self.data.age.values, bins=10, range =(0, 100))
        print('')
        fig, ax = plt.subplots()
        ax.bar(bins[:-1], hist, width=np.diff(bins), edgecolor="black", align="edge")
        plt.xlabel('Age')
        plt.ylabel('Frequencies')
        plt.title('Age Histogram')
        plt.show()

        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        def check_mail(mail):
            if pd.isna(mail):
                return False
            if type(mail) != str:
                return False
            if mail.count('@') != 1 or mail.index('@') in [0, len(mail)-1]:
                return False
            if mail.count('.') != 1 or mail.index('.') in [0, len(mail)-1]:
                return False
            if mail.split('@')[1][0] == '.':
                return False

            return True

        copy_data = self.data.copy()

        copy_data = copy_data[copy_data.email.apply(check_mail)]
        copy_data.reset_index(inplace=True, drop=True)

        return copy_data

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """

        copy_data = self.data.copy()
        questions_col = pd.Series(['q1', 'q2', 'q3', 'q4', 'q5'])
        questions_pd = self.data[questions_col]

        self.data[questions_col] = questions_pd.apply(lambda x: x.fillna(x.mean()), axis=1)
        nan_indices = np.unique((np.where(questions_pd.isna()))[0])

        return self.data, nan_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """

        def calc_mean(series, maximal_nans_per_sub=1):
            import math
            if series.isna().sum() > maximal_nans_per_sub:
                return pd.NA
            return math.floor(series.mean())

        new_data = self.data.copy()
        questions_col = pd.Series(['q1', 'q2', 'q3', 'q4', 'q5'])
        new_data['score'] = new_data[questions_col].apply(calc_mean, axis=1).astype("UInt8")

        return new_data
